// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

contract ping {
    event Deposit(uint amount);
    event Withdraw(uint amount);
    address public owner;
    

    //set sender to owner when contract deployed
    constructor() {
        owner = msg.sender;
    }
    //enable the contract to receive funds with receive external payable
    //announce the deposited amount when funds deposited
    receive() external payable {
        emit Deposit(msg.value);
    }
    
    function withdraw() external {
        //check that the withdrawer is owner
        require(owner == msg.sender, "unauthorized");
        //announce withdrawn amount
        //address(this).balance returns the balance in the smart contract
        emit Withdraw(address(this).balance);
        //withdraw all the money, killing contract and sending the money to owner
    }
    function sendViaCall(address payable _to) external payable {
        // Call returns a boolean value indicating success or failure.
        // This is the current recommended method to use.
        (bool sent, bytes memory data) = _to.call{value: msg.value}("");
        require(sent, "Failed to send Ether");
    }
}
